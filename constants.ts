import type { SearchSettings, Prompts } from './types';

export const DEFAULT_RESUME = `
# Имя Фамилия
Город

## Контакты
- Телефон: +7(000)000-00-00
- Email: your.email@example.com
- Telegram: @your_telegram

## Ключевые компетенции
- **Управление:** Опыт руководства командами и проектами.
- **Технологии:** Глубокое понимание [ваша сфера], опыт работы с [ключевые технологии].
- **Бизнес:** Развитие бизнеса, переговоры, бюджетирование.
- **Аналитика:** Анализ данных, принятие решений на основе метрик.

## Опыт работы

**Последняя Должность, Название Компании** | Город | Годы работы
- Ключевое достижение 1.
- Ключевое достижение 2.
- Описание обязанностей и использованных технологий.

**Предыдущая Должность, Название Компании** | Город | Годы работы
- Ключевое достижение 1.
- Ключевое достижение 2.
- Описание обязанностей.
`;

export const DEFAULT_SEARCH_SETTINGS: SearchSettings = {
    positions: 'Руководитель проекта, Product Manager',
    salary: 150000,
    currency: 'RUB',
    location: 'Москва',
    remote: true,
    employment: ['полная занятость', 'проектная работа'],
    schedule: ['полный день', 'гибкий график'],
    skills: 'управление проектами, agile, scrum, product management, team leadership',
    keywords: 'SaaS, FinTech',
    minCompanyRating: 3.5,
    limit: 10,
};

export const DEFAULT_PROMPTS: Prompts = {
    jobSearch: `
# ЗАДАЧА: ВЕБ-СКРЕПИНГ И АНАЛИЗ ВАКАНСИЙ С ПОМОЩЬЮ ИИ
Ты — продвинутый AI-парсер, متخصص в извлечении структурированной информации из HTML-кода.
Твоя цель — проанализировать предоставленный HTML-код страницы с результатами поиска вакансий с сайта hh.ru и извлечь из него список вакансий в формате JSON.

# ВХОДНЫЕ ДАННЫЕ:
1.  **Резюме кандидата:** Текст резюме для контекста и анализа соответствия.
2.  **HTML-код:** Полный HTML страницы https://hh.ru/search/vacancy?...

# ИНСТРУКЦИИ:
1.  **Найди карточки вакансий:** Внимательно изучи HTML-структуру. Каждая вакансия обычно находится внутри div-контейнера с классом вроде 'vacancy-card--z_UXteNo7bRGzxreB0_I'.
2.  **Извлеки данные для каждой вакансии:**
    *   **title:** Название вакансии (обычно в теге \`<a>\` с классом 'bloko-link').
    *   **company:** Название компании.
    *   **salary:** Зарплата. Если не указана, верни "не указана". Нормализуй (например, "от 150 000 руб." -> "от 150 000 RUB").
    *   **location:** Город или регион.
    *   **description:** Краткое описание или требования (обычно в div с классом 'g-user-content'). Это может быть краткий фрагмент.
    *   **url:** Полная ссылка на вакансию (извлеки из атрибута \`href\` тега \`<a>\`). Должна начинаться с 'https://hh.ru'.
    *   **contacts:** Постарайся найти контактные данные в описании вакансии (email, телефон, telegram username). Если найдено, верни объект вида \`{"email": "...", "phone": "...", "telegram": "..."}\`. Если ничего не найдено, не включай это поле в JSON.
    *   **companyRating:** Оставь 0, так как на странице поиска рейтинга нет.
    *   **companyReviewSummary:** Оставь пустой строкой.
    *   **responsibilities:** Оставь пустым массивом [].
    *   **requirements:** Оставь пустым массивом [].
3.  **Проведи AI-анализ соответствия ('matchAnalysis'):** Для каждой извлеченной вакансии, основываясь на её названии и кратком описании, напиши краткий (1-2 предложения) анализ, почему эта вакансия подходит кандидату согласно его резюме.
4.  **Сформируй JSON:** Верни результат в виде JSON-массива объектов. Каждый объект должен соответствовать интерфейсу Job. Не включай вакансии, где нет названия или ссылки. Ограничь результат {limit} вакансиями.

# ВАЖНО:
-   **Точность:** Извлекай текст как есть, без изменений. Ссылки должны быть полными и рабочими.
-   **Формат:** Вывод должен быть СТРОГО JSON-массивом, без каких-либо комментариев, объяснений или \`\`\`json ... \`\`\` оберток.
-   **Ошибки:** Если HTML не содержит вакансий, верни пустой массив \`[]\`.
`,
    resumeAdapt: `Адаптируй предоставленное базовое резюме, чтобы оно идеально соответствовало требованиям указанной вакансии.
Перепиши разделы "Ключевые компетенции" и "Опыт работы", чтобы подчеркнуть наиболее релевантные навыки и достижения для этой конкретной роли.
Результат должен быть в формате Markdown, кратким, профессиональным и не длиннее одной страницы.
Сохрани контактную информацию кандидата.
В конце добавь сноску: "--- Адаптировано с помощью ИИ для роли {jobTitle} в {jobCompany} ---".`,
    coverLetter: `Напиши профессиональное и краткое сопроводительное письмо от имени кандидата на должность "{jobTitle}" в компанию "{jobCompany}".
Тон должен быть уверенным и располагающим.
Сошлись на ключевые требования из описания вакансии и кратко свяжи их с опытом кандидата из резюме.
Результат верни СТРОГО в формате JSON-объекта со следующими ключами:
{
  "subject": "Отклик на вакансию: {jobTitle}",
  "body": "Полный текст письма, готовый к отправке. Начинай с 'Здравствуйте,'."
}
Не добавляй никаких комментариев или markdown-оберток.`,
    hrResponseAnalysis: `
# ЗАДАЧА: АНАЛИЗ ОТВЕТА ОТ HR
Ты — AI-ассистент, который помогает соискателю понять суть ответа от рекрутера.
Проанализируй предоставленный текст письма от HR.
Твоя задача — определить статус коммуникации и вернуть ОДНО из следующих ключевых слов: 'interview', 'offer', 'archive' (для отказа), или 'tracking' (для нейтральных ответов или запросов доп. информации).

# ПРИМЕРЫ:
- "Спасибо за отклик! Хотим пригласить вас на собеседование..." -> верни "interview"
- "Мы рассмотрели ваше резюме и готовы сделать вам предложение..." -> верни "offer"
- "К сожалению, на данный момент мы не готовы двигаться дальше..." -> верни "archive"
- "Благодарим за интерес. Мы вернемся к вам, как только..." -> верни "tracking"
- "Не могли бы вы прислать ваше портфолио?" -> верни "tracking"

# ВАЖНО:
- Верни ТОЛЬКО ОДНО ключевое слово и ничего больше. Без объяснений и форматирования.

# ТЕКСТ ПИСЬМА ДЛЯ АНАЛИЗА:
`,
    shortMessage: `Сгенерируй ОЧЕНЬ короткое (2-3 предложения), вежливое и профессиональное сообщение для первого контакта с HR в мессенджере (WhatsApp/Telegram) по поводу вакансии "{jobTitle}" в компании "{jobCompany}".
Сообщение должно быть от имени кандидата {candidateName}.
Пример: "Добрый день! Меня зовут {candidateName}. Я нашел вашу вакансию '{jobTitle}' на hh.ru и хотел бы выразить свою заинтересованность. Мое резюме во вложении. Буду рад ответить на ваши вопросы."
Верни только текст сообщения, без приветствий типа "Вот сообщение:" и без кавычек.`,
    emailJobMatch: `
# ЗАДАЧА: СОПОСТАВЛЕНИЕ ПИСЬМА И ВАКАНСИИ
Ты — AI-ассистент, который помогает сопоставить ответ от рекрутера с одной из вакансий, на которые откликнулся пользователь.
Проанализируй текст письма и сравни его с предоставленным списком вакансий.
Твоя задача — найти наиболее подходящую вакансию и вернуть ТОЛЬКО её ID.

# ВХОДНЫЕ ДАННЫЕ:
1.  **Письмо от HR:** Полный текст письма, включая тему и отправителя.
2.  **Список вакансий:** JSON-массив с вакансиями, на которые откликнулся пользователь. Каждая вакансия имеет 'id', 'title', 'company'.

# ПРАВИЛА:
-   Сравнивай по названию компании, должности, и контексту письма.
-   Если найдено точное совпадение, верни ID этой вакансии.
-   Если точного совпадения нет, но есть очень вероятное, верни его ID.
-   Если совпадений нет или ты не уверен, верни строку "NO_MATCH".
-   Твой ответ должен содержать ТОЛЬКО ID вакансии или "NO_MATCH", без каких-либо объяснений.
`
};


export enum AppStatus {
    Idle = 'idle',
    Loading = 'loading',
    Success = 'success',
    Error = 'error',
}